/* Copyright (c) 2017 FIRST. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted (subject to the limitations in the disclaimer below) provided that
 * the following conditions are met:
 *
 * Redistributions of source code must retain the above copyright notice, this list
 * of conditions and the following disclaimer.
 *
 * Redistributions in binary form must reproduce the above copyright notice, this
 * list of conditions and the following disclaimer in the documentation and/or
 * other materials provided with the distribution.
 *
 * Neither the name of FIRST nor the names of its contributors may be used to endorse or
 * promote products derived from this software without specific prior written permission.
 *
 * NO EXPRESS OR IMPLIED LICENSES TO ANY PARTY'S PATENT RIGHTS ARE GRANTED BY THIS
 * LICENSE. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

package org.firstinspires.ftc.teamcode;

import com.qualcomm.robotcore.eventloop.opmode.Disabled;
import org.firstinspires.ftc.robotcore.external.navigation.AngleUnit;
import com.qualcomm.hardware.bosch.BNO055IMU;
import com.qualcomm.hardware.rev.RevHubOrientationOnRobot;
import org.firstinspires.ftc.robotcore.external.navigation.YawPitchRollAngles;
import com.qualcomm.robotcore.eventloop.opmode.Autonomous;
import com.qualcomm.robotcore.eventloop.opmode.LinearOpMode;
import com.qualcomm.robotcore.eventloop.opmode.TeleOp;
import com.qualcomm.robotcore.hardware.DcMotor;
import com.qualcomm.robotcore.util.ElapsedTime;
import com.qualcomm.robotcore.util.Range;


/*
 * This file contains an minimal example of a Linear "OpMode". An OpMode is a 'program' that runs in either
 * the autonomous or the teleop period of an FTC match. The names of OpModes appear on the menu
 * of the FTC Driver Station. When a selection is made from the menu, the corresponding OpMode
 * class is instantiated on the Robot Controller and executed.
 *
 * This particular OpMode just executes a basic Tank Drive Teleop for a two wheeled robot
 * It includes all the skeletal structure that all linear OpModes contain.
 *
 * Use Android Studio to Copy this Class, and Paste it into your team's code folder with a new name.
 * Remove or comment out the @Disabled line to add this OpMode to the Driver Station OpMode list
 */



@Autonomous (name = "Ram")

public class Ram extends LinearOpMode {
    DcMotor fl = null;
    DcMotor fr = null;
    DcMotor bl = null;
    DcMotor br = null;
    double intergral = 0;
    double kp = 0.5;
    double ki = 0.5;
    double kd = 0.5;
    ElapsedTime elapsedTime = new ElapsedTime();
    double previous = 0;
    
    
    
    @Override
    public void runOpMode() {
        
            
        fl  = hardwareMap.get(DcMotor.class, "fl");
        fr = hardwareMap.get(DcMotor.class, "fr");
        bl  = hardwareMap.get(DcMotor.class, "bl");
        br = hardwareMap.get(DcMotor.class, "br");
        
        fl.setDirection(DcMotor.Direction.REVERSE);
        bl.setDirection(DcMotor.Direction.REVERSE);
        
        fl.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
        fr.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
        bl.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
        br.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
        
        
        
        fl.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
        fr.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
        bl.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
        br.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
        
       imu = hardwareMap.get(BNO055IMU.class, "imu");
        
        BNO055IMU.Parameters paramsIMU = new BNO055IMU.Parameters(            
            new RevHubOrientationOnRobot(
                RevHubOrientationOnRobot.LogoFacingDirection.UP,
                RevHubOrientationOnRobot.UsbFacingDirection.RIGHT
                ));
        
                
        paramsIMU.mode = BNO055IMU.SensorMode.IMU;
        paramsIMU.angleUnit = BNO055IMU.AngleUnit.DEGREES;
        imu.initialize(paramsIMU);
        
        YawPitchRollAngles robotOrientation;
        robotOrientatation = imu.getRobotYawPitchRollAngles();
        waitForStart();
        
        move(1000, 1000, 0.2);
        
        move(-500, 500, 0.2);
        
        move(1000, 1000, 0.2);
        
        move(0, 250, 0.2);
        
        move(500, 500, 0.2);
        //reverse everthing to go back home
        move(-500, -500, 0.2);
        move(250, -250, 0.2);
        move(-1000, -1000, 0.2); 
        move(500, -500, 0.2);
        move(-1000, -1000, 0.2);
        
    }
    
     public void move(int lTarget, int rTarget, double speed){
         bl.setTargetPosition(lTarget);
         fl.setTargetPosition(lTarget);
         br.setTargetPosition(rTarget);
         fr.setTargetPosition(rTarget);
         
         
         fl.setMode(DcMotor.RunMode.Run_To_Position);
         fr.setMode(DcMotor.RunMode.Run_To_Position);
         bl.setMode(DcMotor.RunMode.Run_To_Position);
         br.setMode(DcMotor.RunMode.Run_To_Position);
         
         fl.setPower(speed);
         fr.setPower(speed);
         bl.setPower(speed);
         br.setPower(speed);
         
         while (opModeIsActive()){
             double Yaw = robotOrientation.getYaw(AngleUnit.DEGREES);
             double Pitch = robotOrientation.getPitch(AngleUnit.DEGREES);
             double Roll = robotOrientation.getRoll(AngleUnit.DEGREES);
             
             telemetry.addData("imu yaw: ", Yaw);
             telemetry.addData("imu pitch: ", Pitch);
             telemetry.addData("imu roll: ", Roll);
             telemetry.update();
             idle();
         }
     }
    public double PIDController(double target,double current){
             double currentTime = elapsedTime.time();
             double proportionalError = target - current;
             intergral += proportionalError * currentTime;
             double derivative = (current - previous) / (currentTime);
             previous = current;
             elapsedTime.reset();
             return proportionalError * kp + integral * ki + derivative * kd;
         }
}

